/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/// <reference types="react" />
import type * as G from 'graphql';
import type { Form } from '@tinacms/toolkit';
export declare type Action = {
    type: 'start';
    value: {
        query: string;
    };
} | {
    type: 'setData';
    value: object;
} | {
    type: 'addDocumentBlueprints';
    value: {
        blueprints: DocumentBlueprint[];
        formifiedQuery: G.DocumentNode;
    };
} | {
    type: 'addOrReplaceDocumentFormNode';
    value: {
        formNode: FormNode;
        documentForm?: DocumentForm;
    };
} | {
    type: 'onFieldChange';
    value: {
        event: OnChangeEvent;
        form?: Form;
    };
} | {
    type: 'formOnReset';
    value: {
        event: OnChangeEvent;
        form?: Form;
    };
} | {
    type: 'ready';
} | {
    type: 'done';
} | {
    type: 'setIn';
    value: Pick<ChangeSet, 'path' | 'value' | 'displaceIndex'>;
};
export declare type Dispatch = React.Dispatch<Action>;
export declare type FormifiedDocumentNode = {
    id: string;
    _internalSys: {
        path: string;
        relativePath: string;
        collection: {
            name: any;
        };
    };
    _values: object;
};
export declare type ChangeMutation = {
    type: 'change';
};
export declare type ReferenceChangeMutation = {
    type: 'referenceChange';
};
export declare type InsertMutation = {
    type: 'insert';
    at: number;
};
export declare type MoveMutation = {
    type: 'move';
    from: number;
    to: number;
};
export declare type RemoveMutation = {
    type: 'remove';
    at: number;
};
export declare type ResetMutation = {
    type: 'reset';
};
export declare type GlobalMutation = {
    type: 'global';
};
declare type MutationType = ChangeMutation | ReferenceChangeMutation | InsertMutation | MoveMutation | RemoveMutation | ResetMutation | GlobalMutation;
export declare type OnChangeEvent = {
    type: 'forms:fields:onChange' | 'forms:reset';
    value: unknown;
    previousValue: unknown;
    mutationType: MutationType;
    formId: string;
    field: {
        data: {
            tinaField: {
                name: string;
                type: 'string' | 'reference' | 'object';
                list?: boolean;
                parentTypename: string;
            };
        };
        name: string;
    };
};
export declare type ChangeSet = {
    path: string;
    value: unknown;
    formId: string;
    fieldDefinition: {
        name: string;
        type: 'string' | 'reference' | 'object';
        list?: boolean;
    };
    mutationType: MutationType;
    name: string;
    displaceIndex?: boolean;
    formNode: FormNode;
};
export declare type BlueprintPath = {
    name: string;
    alias: string;
    parentTypename?: string;
    list?: boolean;
    isNode?: boolean;
};
export declare type DocumentBlueprint = {
    /** The stringified representation of a path relative to root or it's parent document */
    id: string;
    /** The path to a field node */
    path: BlueprintPath[];
    /** The GraphQL SelectionNode, useful for re-fetching the given node */
    selection: G.SelectionNode;
    fields: FieldBlueprint[];
    /** For now, only top-level, non-list nodes will be shown in the sidebar */
    showInSidebar: boolean;
    /** these 2 are not traditional GraphQL fields but need be kept in-sync regardless */
    hasDataJSONField: boolean;
    hasValuesField: boolean;
};
export declare type FieldBlueprint = {
    /** The stringified representation of a path relative to root or it's parent document */
    id: string;
    documentBlueprintId: string;
    /** The path to a field node */
    path: BlueprintPath[];
};
export declare type FormNode = {
    /** The stringified path with location values injected (eg. 'getBlockPageList.edges.0.node.data.social.1.relatedPage') */
    documentFormId: string;
    documentBlueprintId: string;
    /** Coordinates for the DocumentBlueprint's '[]' values */
    location: number[];
};
/** The document ID is the true ID 'content/pages/hello-world.md') */
declare type DocumentForm = Form;
export declare type State = {
    schema: G.GraphQLSchema;
    query: G.DocumentNode;
    queryString: string;
    status: 'idle' | 'initialized' | 'formified' | 'ready' | 'done';
    count: number;
    data: object;
    changeSets: ChangeSet[];
    blueprints: DocumentBlueprint[];
    formNodes: FormNode[];
    documentForms: DocumentForm[];
};
export {};
