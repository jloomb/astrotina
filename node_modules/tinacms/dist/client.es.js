import fetchPonyfill from "fetch-ponyfill";
import UrlPattern from "url-pattern";
const { fetch, Headers } = fetchPonyfill();
const TINA_HOST = "content.tinajs.io";
class TinaClient {
  constructor({ token, url, queries }) {
    this.parseURL = (overrideUrl) => {
      const url2 = overrideUrl || this.apiUrl;
      if (url2.includes("localhost")) {
        return {
          host: "localhost",
          branch: null,
          isLocalClient: true,
          clientId: null
        };
      }
      const params = new URL(url2);
      const pattern = new UrlPattern("/content/:clientId/github/*", {
        escapeChar: " "
      });
      const result = pattern.match(params.pathname);
      const branch = result == null ? void 0 : result._;
      const clientId = result == null ? void 0 : result.clientId;
      if (!branch || !clientId) {
        throw new Error(`Invalid URL format provided. Expected: https://${TINA_HOST}/content/<ClientID>/github/<Branch> but but received ${url2}`);
      }
      return {
        host: params.host,
        clientId,
        branch,
        isLocalClient: false
      };
    };
    this.apiUrl = url;
    this.readonlyToken = token;
    this.queries = queries(this);
  }
  async request(args) {
    const headers = new Headers();
    if (this.readonlyToken) {
      headers.append("X-API-KEY", this.readonlyToken);
    }
    headers.append("Content-Type", "application/json");
    const bodyString = JSON.stringify({
      query: args.query,
      variables: (args == null ? void 0 : args.variables) || {}
    });
    const url = (args == null ? void 0 : args.url) || this.apiUrl;
    const res = await fetch(url, {
      method: "POST",
      headers,
      body: bodyString,
      redirect: "follow"
    });
    if (!res.ok) {
      let additionalInfo = "";
      if (res.status === 401) {
        additionalInfo = "Please check that your client ID, URL and read only token are configured properly.";
      }
      throw new Error(`Server responded with status code ${res.status}, ${res.statusText}. ${additionalInfo ? additionalInfo : ""} Please see our FAQ for more information: https://tina.io/docs/errors/faq/`);
    }
    const json = await res.json();
    if (json.errors) {
      throw new Error(`Unable to fetch, please see our FAQ for more information: https://tina.io/docs/errors/faq/
  
        Errors: 
	${json.errors.map((error) => error.message).join("\n")}`);
    }
    return {
      data: json == null ? void 0 : json.data,
      query: args.query
    };
  }
}
function createClient(args) {
  const client = new TinaClient(args);
  return client;
}
export { TINA_HOST, TinaClient, createClient };
