/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import { Form } from '@tinacms/toolkit';
import type { FormOptions, TinaCMS } from '@tinacms/toolkit';
export declare function useGraphqlForms<T extends object>({ variables, onSubmit, query, formify, eventList, }: {
    query: string;
    variables: object;
    onSubmit?: (args: onSubmitArgs) => void;
    formify?: formifyCallback;
    /**
     * This is a test utility which allows us to keep track of all the events
     * received by this hook. See `experimental-examples/unit-test-example/pages/index.js
     * for usage.
     */
    eventList?: [];
}): [T, Boolean];
export declare const transformDocumentIntoMutationRequestPayload: (document: {
    [key: string]: unknown;
    _collection: string;
    __typename?: string;
    _template: string;
}, instructions: {
    includeCollection?: boolean;
    includeTemplate?: boolean;
}) => any;
export declare const generateFormCreators: (cms: TinaCMS, showInSidebar?: boolean, global?: boolean | {
    icon?: any;
    layout: 'fullscreen' | 'popup';
}) => {
    createForm: (formConfig: any) => Form<any, import("@tinacms/toolkit").AnyField>;
    createGlobalForm: GlobalFormCreator;
};
declare type FormCreator = (formConfig: FormOptions<any>) => Form;
declare type GlobalFormCreator = (formConfig: FormOptions<any>, options?: GlobalFormOptions) => Form;
interface GlobalFormOptions {
    icon?: any;
    layout: 'fullscreen' | 'popup';
}
export interface FormifyArgs {
    formConfig: FormOptions<any>;
    createForm: FormCreator;
    createGlobalForm: FormCreator;
    skip?: () => void;
}
export declare type formifyCallback = (args: FormifyArgs, cms: TinaCMS) => Form | void;
export declare type onSubmitArgs = {
    /**
     * @deprecated queryString is actually a mutation string, use `mutationString` instead
     */
    queryString: string;
    mutationString: string;
    variables: object;
};
export {};
